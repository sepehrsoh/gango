// Code generate by Gango
package wiring

import (
	"fmt"
	{{ if .grpc}} "net" {{ end }}

	"{{.ProjectName}}/src/service/providers"
	"{{.ProjectName}}/src/lib/logging"

	{{ if .withRedis }}"github.com/go-redis/redis"{{ end }}
	{{ if .withElastic }}"github.com/olivere/elastic/v7"{{ end }}
	{{ if .withPostgres }}"gorm.io/gorm"{{ end }}
)

var logger = logging.GetLogger("service")

{{ if .withRedis }}func (w *Wire) GetRedis() *redis.Client {
	if w.redis == nil {
		client, err := providers.NewRedisFromConfig(providers.RedisConfig{
			Server:   w.config.Redis.Server,
			Password: w.config.Redis.Password,
			DB:       w.config.Redis.DB,
		})
		if err != nil {
			logger.Panic(err)
		}
		w.redis = client
	}
	return w.redis
}{{ end }}

{{ if .withElastic }}func (w *Wire) GetElasticSearch() *elastic.Client {
	if w.elastic == nil {
		elastic, err := providers.NewElastic(providers.ElasticConfig{
		Host    : w.config.Elastic.Host    ,
        Port    : w.config.Elastic.Port    ,
        Username: w.config.Elastic.Username,
        Password: w.config.Elastic.Password,
		})
		if err != nil {
			logger.Panic(err)
		}
		w.elastic = elastic
	}
	return w.elastic
}{{ end }}

{{ if .withPostgres }}func (w *Wire) GetPostgres() *gorm.DB {
	if w.postgres == nil {
		db, err := providers.NewPostgresFromConfig(providers.PostgresConfig{
		    Host:            w.config.Postgres.Host,
            Port:            w.config.Postgres.Port,
            User:            w.config.Postgres.User,
            Password:        w.config.Postgres.Password,
            DB:              w.config.Postgres.DB,
            Timezone:        w.config.Postgres.Timezone,
            ConnMaxLifetime: w.config.Postgres.ConnMaxLifetime,
            MaxIdleConns:    w.config.Postgres.MaxIdleConns,
            MaxOpenConns:    w.config.Postgres.MaxOpenConns,
		})
		if err != nil {
			logger.Panic(err)
		}
		w.postgres = db
	}
	return w.postgres
}{{ end }}

{{ if .gin }}
func (w *Wire) GetGinServer() func() {
	gin := providers.NewGinServer(w.GetAuthService())
	w.registerHandlers(gin)
	return func() {
		logger.With(
			"address", w.config.ServerAddress.Host,
			"port", w.config.ServerAddress.Port,
		).Infof("Start HTTP server")
		if err := gin.Run(
			fmt.Sprintf("%v:%v",  w.config.ServerAddress.Host, w.config.ServerAddress.Port)); err != nil {
			logger.Fatalf("listen: %s\n", err)
		}
	}
}
{{ end }}
{{ if .grpc }}
func (w *Wire) GetGRPCServer() (runServer func(), stopServer func()) {
	grpcServer := providers.NewGrpFromConf(w.GetAuthService())
	w.registerHandlers(grpcServer)
	runServer = func() {
		logger.Infow("Start Grpc Server", "Host", w.config.ServerAddress.Host, "Port", w.config.ServerAddress.Port)
		lis, err := net.Listen("tcp", fmt.Sprintf("%s:%s", w.config.ServerAddress.Host, w.config.ServerAddress.Port))
		if err != nil {
			logger.Fatal(err)
		}
		if err := grpcServer.Serve(lis); err != nil {
			logger.Fatal(err)
		}
	}
	stopServer = func() {
		grpcServer.GracefulStop()
	}
	return
}
{{ end }}
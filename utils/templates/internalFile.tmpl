// Code generate by Gango
package wiring

import (
	helloWorld "{{.ProjectName}}/src/hello-world"
	"{{.ProjectName}}/src/lib/executors"
	"{{.ProjectName}}/src/lib/monitor"
	"{{.ProjectName}}/src/middlewares"

	{{ if .gin }}"github.com/gin-gonic/gin"{{ end }}
	{{ if .grpc }}grpcAuth "github.com/grpc-ecosystem/go-grpc-middleware/auth"
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
	"google.golang.org/grpc"

    {{ end }}
)

func (w *Wire) GetMetricsServer() *monitor.PrometheusMetricsServer {
	return &monitor.PrometheusMetricsServer{
		URL:  w.config.Monitor.Host,
		Port: w.config.Monitor.Port,
	}
}

func (w *Wire) GetExecutorsRegistry() *executors.Registry {
	if w.executorsRegistry == nil {
		w.executorsRegistry = &executors.Registry{}
	}
	return w.executorsRegistry
}

{{ if .gin }}
func (w *Wire) GetAuthService() gin.HandlerFunc {
	return middlewares.NewMiddleware().AuthMiddleWare()
}

func (w *Wire) registerHandlers(engine *gin.Engine) {
	// TODO update below lines base on your controllers
	v1 := engine.Group("/v1")
	w.GetHelloWordController().RegisterRoutes(v1)
}
{{ end }}
{{ if .grpc }}
func (w *Wire) GetAuthService() grpcAuth.AuthFunc {
	return middlewares.NewMiddleware().AuthMiddleWare()
}

func (w *Wire) registerHandlers(grpcServer *grpc.Server) {
	grpc_prometheus.EnableHandlingTimeHistogram()
	grpc_prometheus.Register(grpcServer)
	// TODO register services base on your proto file generated
}
{{ end }}

func (w *Wire) GetHelloWordController() *helloWorld.HelloWorldController {
	return helloWorld.NewHelloWorldController()
}

// Code generate by Gango
package configs

import (
	"os"

	{{ if .withPostgres }}"github.com/spf13/cast"{{ end }}
)

func GetEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func NewConfigFromEnv() Config {
	return Config{
		ServerAddress: ServerAddress{
			Host: GetEnv("SERVER_HOST", "0.0.0.0"),
			Port: GetEnv("SERVER_PORT", "8000"),
		},
		Monitor: Monitor{
			Host: GetEnv("MONITOR_ROUT", "/metrics"),
			Port: GetEnv("MONITOR_PORT", "9090"),
		},
		{{ if .withRedis }}Redis: Redis{
			Server:   GetEnv("REDIS_SERVER", "localhost:6379"),
			DB:  	  GetEnv("REDIS_DB", "0"),
			Password: GetEnv("REDIS_PASSWORD", ""),
		},{{ end }}
		{{ if .withElastic }}Elastic: Elastic{
		    Host:     GetEnv("ELASTIC_HOST", "localhost"),
            Port:     GetEnv("ELASTIC_PORT", "9200"),
            Username: GetEnv("ELASTIC_USERNAME", ""),
            Password: GetEnv("ELASTIC_PASSWORD", ""),
		},{{ end }}
		{{ if .withPostgres}}Postgres: Postgres{
		    Host:              GetEnv("POSTGRES_HOST", "localhost"),
            Port:              GetEnv("POSTGRES_PORT", "5432"),
            User:              GetEnv("POSTGRES_USER", "postgres"),
            Password:          GetEnv("POSTGRES_PASSWORD", ""),
            DB:                GetEnv("POSTGRES_DB", "postgres"),
            Timezone:          GetEnv("POSTGRES_TIMEZONE", "UTC"),
            ConnMaxLifetime:   cast.ToInt(GetEnv("POSTGRES_CONN_MAX_TIME", "1")),
            MaxIdleConns:      cast.ToInt(GetEnv("POSTGRES_MAX_IDLE_CONN", "10")),
            MaxOpenConns:      cast.ToInt(GetEnv("POSTGRES_MAX_OPEN_CONN", "10")),
		},{{ end }}
	}
}

type Config struct {
	ServerAddress ServerAddress
	Monitor       Monitor
	{{ if .withRedis }}Redis         Redis{{ end }}
	{{ if .withElastic }}Elastic       Elastic{{ end }}
	{{ if .withPostgres }}Postgres      Postgres{{ end }}
}

type ServerAddress struct {
	Host string
	Port string
}

type Monitor struct {
	Host string
	Port string
}

{{ if .withRedis }}type Redis struct {
	Server   string
	DB 	     string
	Password string
}{{ end }}

{{ if .withElastic }}type Elastic struct {
    Host     string
    Port     string
    Username string
    Password string
}{{ end }}

{{ if .withPostgres }}type Postgres struct{
    Host            string
    Port            string
    User            string
    Password        string
    DB              string
    Timezone        string
    ConnMaxLifetime int
    MaxIdleConns    int
    MaxOpenConns    int
}{{ end }}
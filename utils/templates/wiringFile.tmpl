// Code generate by Gango
package wiring

import (
	"time"

	"{{.ProjectName}}/src/lib/executors"
	"{{.ProjectName}}/src/service/configs"

    {{ if .withRedis }}"github.com/go-redis/redis"{{ end }}
	{{ if .withElastic }}"github.com/olivere/elastic/v7"{{ end }}
	{{ if .withPostgres }}"gorm.io/gorm"{{ end }}
)


func NewWire() *Wire {
	wire := &Wire{
		config: configs.NewConfigFromEnv(),
	}
	wire.init()
	return wire
}

type Wire struct {
	config 				configs.Config
	executorsRegistry   *executors.Registry
	{{ if .withRedis }}redis               *redis.Client{{ end }}
	{{ if .withElastic }}elastic             *elastic.Client{{ end }}
	{{ if .withPostgres }}postgres                  *gorm.DB {{ end }}
}

//	initProviders initials providers you are using
func (w *Wire) initProviders() {
    {{ if .withRedis }}w.GetRedis(){{ end }}
	{{ if .withElastic }}w.GetElasticSearch(){{ end }}
	{{ if .withPostgres }}w.GetPostgres(){{ end }}
}

func (w *Wire) init() {
	w.initProviders()
	w.initMetrics()
	w.initExecutorsRegistry()
}

func (w *Wire) initMetrics() {
	StartTime.Add(float64(time.Now().Unix()))
	metricsServer := w.GetMetricsServer()
	metricsServer.Register(executors.WorkerCounter)
	metricsServer.Register(StartTime)
}

func (w *Wire) initExecutorsRegistry() {
	registry := w.GetExecutorsRegistry()
	registry.Register(w.GetMetricsServer())
}
